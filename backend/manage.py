import sys
from app import create_app
from commands import seed_assets, update_prices  # Importe as fun√ß√µes diretamente


def print_help():
    """Exibe a mensagem de ajuda."""
    # ... (c√≥digo da fun√ß√£o print_help continua o mesmo) ...
    print("----------------------------------------------------")
    print("     Gerenciador de Tarefas do Projeto de Otimiza√ß√£o    ")
    print("----------------------------------------------------")
    print("Use: python manage.py [comando]")
    print("\nComandos dispon√≠veis:")
    print("  setup      - üöÄ Configura o ambiente pela primeira vez.")
    print("  run        - ‚ñ∂Ô∏è  Inicia a API Flask em modo de desenvolvimento.")
    print("  update     - üîÑ Atualiza os pre√ßos dos ativos (√∫ltimo ano).")
    print("----------------------------------------------------")


def main():
    """Fun√ß√£o principal que interpreta os comandos."""
    # Cria a inst√¢ncia da aplica√ß√£o Flask
    app = create_app()

    command = sys.argv[1] if len(sys.argv) > 1 else "help"

    if command == "setup":
        print("üöÄ Configurando o ambiente pela primeira vez...")
        seed_assets(app)
      #  update_prices(app, full_history=True)
        print("\n‚úÖ Ambiente configurado com sucesso!")

    elif command == "run":
        print("‚ñ∂Ô∏è  Iniciando a API em http://127.0.0.1:5000 ...")
        # Para rodar o servidor, usamos o m√©todo run do pr√≥prio app
        app.run(debug=True)

    elif command == "update":
        print("üîÑ Atualizando os pre√ßos dos ativos (√∫ltimo ano)...")
        update_prices(app, full_history=False)
        print("\n‚úÖ Pre√ßos atualizados.")

    elif command == "help":
        print_help()

    else:
        print(f"\nComando '{command}' n√£o reconhecido.")
        print_help()


if __name__ == "__main__":
    main()