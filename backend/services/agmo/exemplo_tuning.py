"""
Exemplos de Uso do Sistema de Tuning de Hiperpar√¢metros

Este script demonstra como utilizar o HyperparameterTuningService para:
1. Analisar converg√™ncia do algoritmo
2. Realizar grid search de hiperpar√¢metros
3. Encontrar a configura√ß√£o √≥tima

Para executar:
    python exemplo_tuning.py

Autor: Sistema de Otimiza√ß√£o de Portf√≥lio - TCC
"""

import sys
import os
from datetime import datetime, timedelta
import logging

# Adiciona o diret√≥rio raiz ao path para importa√ß√µes
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from app import create_app
from models import db, Ativo
from services.agmo.hyperparameter_tuning_service import HyperparameterTuningService

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def exemplo_1_analise_convergencia():
    """
    Exemplo 1: An√°lise de Converg√™ncia

    Analisa como o algoritmo converge ao longo das gera√ß√µes.
    √ötil para determinar o n√∫mero m√≠nimo de gera√ß√µes necess√°rias.
    """
    print("\n" + "=" * 80)
    print("EXEMPLO 1: AN√ÅLISE DE CONVERG√äNCIA")
    print("=" * 80)
    print("\nObjetivo: Determinar quantas gera√ß√µes s√£o necess√°rias para converg√™ncia\n")

    app = create_app()

    # Busca alguns ativos para teste
    with app.app_context():
        ativos = db.session.query(Ativo).limit(10).all()
        ids_ativos = [a.id for a in ativos]
        print(f"Usando {len(ids_ativos)} ativos para an√°lise: {[a.ticker for a in ativos]}\n")

    # Cria o servi√ßo de tuning
    tuning_service = HyperparameterTuningService(app)

    # Executa an√°lise de converg√™ncia
    print("Executando an√°lise de converg√™ncia...")
    print("- Popula√ß√£o: 100")
    print("- Gera√ß√µes m√°ximas: 200")
    print("- Execu√ß√µes: 5 (para an√°lise estat√≠stica)")
    print("\nIsso pode levar alguns minutos...\n")

    try:
        resultados = tuning_service.convergence_analysis(
            ids_ativos=ids_ativos,
            nivel_risco='moderado',
            max_generations=200,
            population_size=100,
            n_runs=5
        )

        print("\n‚úÖ An√°lise conclu√≠da!")
        print(f"\nüìä Resultados:")
        print(f"   - N√∫mero de execu√ß√µes: {resultados['n_runs']}")
        print(f"   - Gera√ß√£o m√©dia de converg√™ncia: {resultados['convergence_mean']:.1f}")
        print(f"   - Desvio padr√£o: {resultados['convergence_std']:.1f}")
        print(f"\nüí° Recomenda√ß√£o: Use pelo menos {int(resultados['convergence_mean'] + resultados['convergence_std'])} gera√ß√µes")
        print(f"\nüìÅ Gr√°ficos salvos em: tuning_results/")

    except Exception as e:
        logger.error(f"Erro na an√°lise de converg√™ncia: {e}")
        raise


def exemplo_2_grid_search_basico():
    """
    Exemplo 2: Grid Search B√°sico

    Testa diferentes combina√ß√µes de popula√ß√£o e gera√ß√µes.
    √ötil para encontrar o melhor trade-off qualidade vs tempo.
    """
    print("\n" + "=" * 80)
    print("EXEMPLO 2: GRID SEARCH B√ÅSICO")
    print("=" * 80)
    print("\nObjetivo: Encontrar a melhor combina√ß√£o de popula√ß√£o √ó gera√ß√µes\n")

    app = create_app()

    # Busca ativos
    with app.app_context():
        ativos = db.session.query(Ativo).limit(10).all()
        ids_ativos = [a.id for a in ativos]
        print(f"Usando {len(ids_ativos)} ativos: {[a.ticker for a in ativos]}\n")

    # Cria o servi√ßo
    tuning_service = HyperparameterTuningService(app)

    # Configura√ß√µes para testar
    population_sizes = [50, 100, 200]
    generation_counts = [25, 50, 100]

    print("Configura√ß√µes a testar:")
    print(f"   - Tamanhos de popula√ß√£o: {population_sizes}")
    print(f"   - N√∫meros de gera√ß√µes: {generation_counts}")
    print(f"   - Execu√ß√µes por configura√ß√£o: 3")
    print(f"   - Total de execu√ß√µes: {len(population_sizes) * len(generation_counts) * 3}")
    print("\nIsso pode levar v√°rios minutos...\n")

    try:
        summary = tuning_service.grid_search(
            ids_ativos=ids_ativos,
            nivel_risco='moderado',
            population_sizes=population_sizes,
            generation_counts=generation_counts,
            n_runs=3
        )

        print("\n‚úÖ Grid Search conclu√≠do!")
        print(f"\nüìä Top 5 Configura√ß√µes (por Hypervolume):")
        print(summary.head(5).to_string())

        # Melhor configura√ß√£o
        best = summary.iloc[0]
        print(f"\nüèÜ Melhor Configura√ß√£o:")
        print(f"   - Popula√ß√£o: {int(best['population_size'])}")
        print(f"   - Gera√ß√µes: {int(best['generations'])}")
        print(f"   - Hypervolume: {best['final_hypervolume_mean']:.6f} (¬±{best['final_hypervolume_std']:.6f})")
        print(f"   - Tempo m√©dio: {best['execution_time_mean']:.2f}s (¬±{best['execution_time_std']:.2f}s)")

        print(f"\nüìÅ Resultados salvos em: tuning_results/")

    except Exception as e:
        logger.error(f"Erro no grid search: {e}")
        raise


def exemplo_3_grid_search_completo():
    """
    Exemplo 3: Grid Search Completo (para TCC)

    Teste abrangente para inclus√£o no TCC.
    Testa mais configura√ß√µes e executa mais vezes para resultados robustos.
    """
    print("\n" + "=" * 80)
    print("EXEMPLO 3: GRID SEARCH COMPLETO (PARA TCC)")
    print("=" * 80)
    print("\nObjetivo: An√°lise abrangente para fundamentar escolha de hiperpar√¢metros\n")

    app = create_app()

    # Busca ativos
    with app.app_context():
        ativos = db.session.query(Ativo).limit(15).all()
        ids_ativos = [a.id for a in ativos]
        print(f"Usando {len(ids_ativos)} ativos: {[a.ticker for a in ativos]}\n")

    # Cria o servi√ßo
    tuning_service = HyperparameterTuningService(app)

    # Configura√ß√µes abrangentes
    population_sizes = [50, 100, 150, 200, 300]
    generation_counts = [25, 50, 75, 100, 150, 200]

    print("Configura√ß√µes a testar:")
    print(f"   - Tamanhos de popula√ß√£o: {population_sizes}")
    print(f"   - N√∫meros de gera√ß√µes: {generation_counts}")
    print(f"   - Execu√ß√µes por configura√ß√£o: 10 (para an√°lise estat√≠stica robusta)")
    print(f"   - Total de execu√ß√µes: {len(population_sizes) * len(generation_counts) * 10}")
    print("\n‚ö†Ô∏è  ATEN√á√ÉO: Isso pode levar HORAS para completar!")
    print("   Considere executar em um servidor ou durante a noite.\n")

    resposta = input("Deseja continuar? (s/n): ")
    if resposta.lower() != 's':
        print("Opera√ß√£o cancelada.")
        return

    try:
        summary = tuning_service.grid_search(
            ids_ativos=ids_ativos,
            nivel_risco='moderado',
            population_sizes=population_sizes,
            generation_counts=generation_counts,
            n_runs=10,
            time_limit=None  # Sem limite de tempo
        )

        print("\n‚úÖ Grid Search Completo conclu√≠do!")
        print(f"\nüìä Resumo dos Resultados:")
        print(summary.to_string())

        # An√°lise detalhada
        best = summary.iloc[0]
        print(f"\nüèÜ Configura√ß√£o √ìtima:")
        print(f"   - Popula√ß√£o: {int(best['population_size'])}")
        print(f"   - Gera√ß√µes: {int(best['generations'])}")
        print(f"   - Hypervolume: {best['final_hypervolume_mean']:.6f} (¬±{best['final_hypervolume_std']:.6f})")
        print(f"   - Spread: {best['final_spread_mean']:.6f} (¬±{best['final_spread_std']:.6f})")
        print(f"   - Spacing: {best['final_spacing_mean']:.6f} (¬±{best['final_spacing_std']:.6f})")
        print(f"   - Tamanho Pareto: {best['pareto_size_mean']:.1f} (¬±{best['pareto_size_std']:.1f})")
        print(f"   - Tempo m√©dio: {best['execution_time_mean']:.2f}s (¬±{best['execution_time_std']:.2f}s)")

        # Exporta todos os resultados
        filename = tuning_service.export_results()
        print(f"\nüìÅ Todos os resultados exportados para: {filename}")
        print(f"üìÅ Gr√°ficos e tabelas em: tuning_results/")

        print("\nüí° Recomenda√ß√µes para o TCC:")
        print("   1. Use os gr√°ficos gerados para o cap√≠tulo de metodologia")
        print("   2. Inclua a tabela de resultados completa em um ap√™ndice")
        print("   3. Discuta o trade-off qualidade vs tempo computacional")
        print("   4. Compare diferentes perfis de risco com a configura√ß√£o √≥tima")

    except Exception as e:
        logger.error(f"Erro no grid search completo: {e}")
        raise

def exemplo_4_quick_test():
    """
    Exemplo 5: Teste R√°pido

    Teste r√°pido apenas para validar que tudo est√° funcionando.
    Ideal para desenvolvimento e debugging.
    """
    print("\n" + "=" * 80)
    print("EXEMPLO 5: TESTE R√ÅPIDO (DESENVOLVIMENTO)")
    print("=" * 80)
    print("\nObjetivo: Validar que o sistema est√° funcionando corretamente\n")

    app = create_app()

    # Busca ativos
    with app.app_context():
        ativos = db.session.query(Ativo).limit(5).all()
        ids_ativos = [a.id for a in ativos]
        print(f"Usando apenas {len(ids_ativos)} ativos para teste r√°pido\n")

    tuning_service = HyperparameterTuningService(app)

    print("Executando teste r√°pido:")
    print("   - Popula√ß√£o: [50, 100]")
    print("   - Gera√ß√µes: [25, 50]")
    print("   - 2 execu√ß√µes por configura√ß√£o")
    print("\nIsso deve levar apenas alguns minutos...\n")

    try:
        summary = tuning_service.grid_search(
            ids_ativos=ids_ativos,
            nivel_risco='moderado',
            population_sizes=[50, 100],
            generation_counts=[25, 50],
            n_runs=2
        )

        print("\n‚úÖ Teste r√°pido conclu√≠do com sucesso!")
        print(f"\nüìä Resultados:")
        print(summary.to_string())

        best_config = tuning_service.get_best_configuration()
        print(f"\nüèÜ Melhor configura√ß√£o: {best_config}")

    except Exception as e:
        logger.error(f"Erro no teste r√°pido: {e}")
        raise


def exemplo_6_tuning_adaptativo():
    """
    Exemplo 6: Tuning Adaptativo por Quantidade de Ativos

    Este √© o exemplo MAIS IMPORTANTE para otimiza√ß√£o de performance!
    Determina automaticamente a melhor configura√ß√£o para cada quantidade
    de ativos, salvando no banco para uso futuro.
    """
    print("\n" + "=" * 80)
    print("EXEMPLO 6: TUNING ADAPTATIVO POR QUANTIDADE DE ATIVOS")
    print("=" * 80)
    print("\nObjetivo: Determinar configura√ß√£o √≥tima para diferentes n√∫meros de ativos\n")
    print("‚ö° ESTE EXEMPLO OTIMIZA O TEMPO DE EXECU√á√ÉO FUTURO!")
    print("   Depois de executar, o sistema automaticamente usar√° a")
    print("   configura√ß√£o √≥tima baseada no n√∫mero de ativos.\n")

    app = create_app()

    tuning_service = HyperparameterTuningService(app)

    # Configura√ß√µes do tuning
    asset_ranges = [5, 10, 15, 20]  # Quantidades de ativos a testar
    population_sizes = [50, 100, 150, 200, 300]
    generation_counts = [25, 50, 75, 100, 150, 200]
    n_runs = 5  # Para an√°lise estat√≠stica robusta

    print("üìã Configura√ß√£o do Tuning Adaptativo:")
    print(f"   - Quantidades de ativos: {asset_ranges}")
    print(f"   - Popula√ß√µes: {population_sizes}")
    print(f"   - Gera√ß√µes: {generation_counts}")
    print(f"   - Execu√ß√µes por configura√ß√£o: {n_runs}")
    print(f"\n   Total de otimiza√ß√µes:")
    print(f"   {len(asset_ranges)} ativos √ó {len(population_sizes)} pop √ó "
          f"{len(generation_counts)} gen √ó {n_runs} runs")
    print(f"   = {len(asset_ranges) * len(population_sizes) * len(generation_counts) * n_runs} execu√ß√µes")
    print(f"\n‚è±Ô∏è  Estimativa de tempo: 4-8 HORAS")
    print(f"   Recomenda√ß√£o: Execute durante a noite ou fim de semana\n")

    resposta = input("Deseja continuar? (s/n): ")
    if resposta.lower() != 's':
        print("Opera√ß√£o cancelada.")
        return

    try:
        print("\nüöÄ Iniciando Tuning Adaptativo...\n")

        df_optimal = tuning_service.adaptive_tuning_by_num_assets(
            asset_ranges=asset_ranges,
            nivel_risco='neutro',  # Neutro serve para todos os perfis
            population_sizes=population_sizes,
            generation_counts=generation_counts,
            n_runs=n_runs,
            save_to_db=True  # ‚úÖ SALVA NO BANCO!
        )

        print("\n" + "=" * 80)
        print("‚úÖ TUNING ADAPTATIVO CONCLU√çDO COM SUCESSO!")
        print("=" * 80)

        if not df_optimal.empty:
            print("\nüìä Configura√ß√µes √ìtimas Encontradas:\n")
            print(df_optimal[[
                'num_ativos', 'population_size', 'generations',
                'hypervolume_mean', 'execution_time_mean'
            ]].to_string(index=False))

            print("\nüí° Pr√≥ximos Passos:")
            print("   1. Essas configura√ß√µes foram salvas no banco de dados")
            print("   2. Quando voc√™ otimizar carteiras, o sistema automaticamente")
            print("      usar√° a melhor configura√ß√£o baseada no n√∫mero de ativos")
            print("   3. Exemplo:")
            print("      - 5 ativos ‚Üí usa config √≥tima para 5 ativos")
            print("      - 12 ativos ‚Üí usa config √≥tima para 10 ativos (mais pr√≥xima)")
            print("      - 18 ativos ‚Üí usa config √≥tima para 20 ativos (mais pr√≥xima)")

            print("\nüéØ Benef√≠cios:")
            print("   - Otimiza√ß√µes mais r√°pidas para poucos ativos")
            print("   - Melhor qualidade para muitos ativos")
            print("   - Zero configura√ß√£o manual necess√°ria!")

        print(f"\nüìÅ Arquivos gerados:")
        print(f"   - CSV: tuning_results/adaptive_tuning_*.csv")
        print(f"   - Gr√°fico: tuning_results/adaptive_tuning_plot_*.png")
        print(f"   - Banco de dados: hyperparameter_configs (tabela)")

    except Exception as e:
        logger.error(f"Erro no tuning adaptativo: {e}")
        raise


def exemplo_7_testar_auto_lookup():
    """
    Exemplo 7: Testar Auto-Lookup de Configura√ß√µes

    Demonstra como o sistema busca automaticamente a melhor configura√ß√£o.
    """
    print("\n" + "=" * 80)
    print("EXEMPLO 7: TESTE DE AUTO-LOOKUP")
    print("=" * 80)
    print("\nObjetivo: Demonstrar busca autom√°tica de configura√ß√µes √≥timas\n")

    app = create_app()

    # Testa com diferentes quantidades de ativos
    test_quantities = [5, 8, 12, 18, 22]

    print("üîç Testando auto-lookup para diferentes quantidades de ativos:\n")

    for num_ativos in test_quantities:
        print(f"\n{'='*60}")
        print(f"Testando com {num_ativos} ativos:")
        print(f"{'='*60}")

        # Busca configura√ß√£o do banco
        with app.app_context():
            from models import HyperparameterConfig

            config = HyperparameterConfig.get_optimal_config(
                num_ativos=num_ativos,
                nivel_risco='neutro'
            )

            if config:
                print(f"‚úÖ Configura√ß√£o encontrada!")
                print(f"   üìä Popula√ß√£o: {config.population_size}")
                print(f"   üìä Gera√ß√µes: {config.generations}")
                print(f"   üéØ Configura√ß√£o baseada em: {config.num_ativos} ativos")
                print(f"   üìÖ Tuning realizado em: {config.tuning_date.strftime('%Y-%m-%d')}")
                print(f"   ‚è±Ô∏è  Tempo esperado: {config.execution_time_mean:.2f}s")
            else:
                print(f"‚ö†Ô∏è  Configura√ß√£o n√£o encontrada")
                print(f"   Ser√° usado: Popula√ß√£o=100, Gera√ß√µes=50 (padr√£o)")

    print("\n" + "=" * 80)
    print("üí° Como funciona o Auto-Lookup:")
    print("=" * 80)
    print("1. Sistema recebe pedido de otimiza√ß√£o com N ativos")
    print("2. Busca no banco configura√ß√£o para N ativos")
    print("3. Se n√£o encontrar exata, busca a mais pr√≥xima (¬±2 ativos)")
    print("4. Se ainda n√£o encontrar, usa configura√ß√£o padr√£o")
    print("5. Otimiza√ß√£o executa com par√¢metros √≥timos automaticamente!")
    print("\n‚úÖ ZERO configura√ß√£o manual necess√°ria!")


def menu_principal():
    """Menu principal para escolher qual exemplo executar."""
    print("\n" + "=" * 80)
    print("SISTEMA DE TUNING DE HIPERPAR√ÇMETROS - EXEMPLOS")
    print("=" * 80)
    print("\nEscolha o exemplo que deseja executar:\n")
    print("1. An√°lise de Converg√™ncia (recomendado para come√ßar)")
    print("2. Grid Search B√°sico")
    print("3. Grid Search Completo (para TCC - DEMORADO)")
    print("4. Teste R√°pido (valida√ß√£o)")
    print("6. Tuning Adaptativo por Quantidade de Ativos ‚ö° RECOMENDADO!")
    print("7. Testar Auto-Lookup de Configura√ß√µes")
    print("0. Sair")

    escolha = input("\nDigite o n√∫mero do exemplo: ")

    exemplos = {
        '1': exemplo_1_analise_convergencia,
        '2': exemplo_2_grid_search_basico,
        '3': exemplo_3_grid_search_completo,
        '4': exemplo_4_quick_test,
        '6': exemplo_6_tuning_adaptativo,
        '7': exemplo_7_testar_auto_lookup,
    }

    if escolha in exemplos:
        try:
            exemplos[escolha]()
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Opera√ß√£o interrompida pelo usu√°rio.")
        except Exception as e:
            print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
            logger.exception("Erro detalhado:")
    elif escolha == '0':
        print("\nSaindo...")
    else:
        print("\n‚ùå Op√ß√£o inv√°lida!")


if __name__ == "__main__":
    try:
        menu_principal()
    except KeyboardInterrupt:
        print("\n\nPrograma encerrado pelo usu√°rio.")
    except Exception as e:
        logger.exception("Erro fatal:")
        print(f"\n‚ùå Erro fatal: {e}")
