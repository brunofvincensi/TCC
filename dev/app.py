"""
App de Web Scraping com controle de execu√ß√£o
Suporta modos BUY_&_HOLD (execu√ß√£o √∫nica) e DAY_TRADE (execu√ß√£o di√°ria √†s 22h)
"""

import time
import schedule
from datetime import datetime, timedelta
from enum import Enum
import argparse
import logging
import sys

# Importa m√≥dulos utilit√°rios para consulta de a√ß√µes, banco de dados e servi√ßos de not√≠cias
from utils import yahoo_finance
from utils.database import initialize_database
from utils.news_service import get_news_service
from web_scraping.exame import web_scrapping as exame_web_scrapping
from web_scraping.infomoney import web_scrapping as infomoney_web_scrapping

# Ticker que ser√° utilizado para coleta de informa√ß√µes
TICKER = "VALE3"  # Exemplos: BBAS3, PETR4, VALE3, ITUB4, FIQE3, ITSA4, EGIE3, SAPR4

# Configura√ß√£o de logging para registrar eventos no terminal e em arquivo
logging.basicConfig(
    level=logging.INFO,  # N√≠vel m√≠nimo de log
    format='%(asctime)s - %(levelname)s - %(message)s',  # Formato do log
    handlers=[
        logging.FileHandler('web_scraping.log'),  # Salva em arquivo
        logging.StreamHandler(sys.stdout)         # Mostra no console
    ]
)

# Defini√ß√£o dos modos de opera√ß√£o dispon√≠veis
class TradingMode(Enum):
    BUY_AND_HOLD = "BUY_&_HOLD"  # Executa scraping apenas uma vez
    DAY_TRADE = "DAY_TRADE"      # Executa scraping diariamente √†s 22h

class WebScrapingApp:
    def __init__(self, mode: TradingMode):
        """Inicializa a aplica√ß√£o de scraping"""
        self.mode = mode
        self.running = False
        self.news_service = get_news_service()

    def web_scrapping_exame(self, trading_mode, ticker_id, company_name):
        """Executa o scraping do site Exame"""
        try:
            logging.info("Executando web scraping - Exame")
            # Chama fun√ß√£o do m√≥dulo exame.py para coletar dados
            success = exame_web_scrapping(trading_mode, TICKER, ticker_id, company_name, self.news_service)

            if success:
                print("‚úÖ Web scraping Exame executado com sucesso")
                logging.info("Web scraping Exame conclu√≠do")
                return True
            else:
                print("‚ùå Web scraping Exame falhou")
                logging.error("Web scraping Exame falhou")
                return False
        except Exception as e:
            logging.error(f"Erro no web scraping Exame: {e}")
            return False

    def web_scrapping_info_money(self, trading_mode, ticker_id, company_name):
        """Executa o scraping do site InfoMoney (simulado por enquanto)"""
        try:
            logging.info("Executando web scraping - InfoMoney")
            # Chama fun√ß√£o do m√≥dulo exame.py para coletar dados
            success = infomoney_web_scrapping(trading_mode, TICKER, ticker_id, company_name, self.news_service)
            if success:
                print("‚úÖ Web scraping InfoMoney executado com sucesso")
                logging.info("Web scraping InfoMoney conclu√≠do")
                return True
            else:
                print("‚ùå Web scraping InfoMoney falhou")
                logging.error("Web scraping InfoMoney falhou")
                return False
        except Exception as e:
            logging.error(f"Erro no web scraping InfoMoney: {e}")
            return False

    def execute_scraping(self, trading_mode, ticker_id, company_name):
        """Executa todos os scrapers (Exame e InfoMoney)"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"\nüöÄ Iniciando execu√ß√£o - {timestamp}")
        logging.info(f"Iniciando execu√ß√£o do scraping - Modo: {self.mode.value}")

        # Executa cada scraping individual
        success_exame = self.web_scrapping_exame(trading_mode, ticker_id, company_name)
        success_info_money = self.web_scrapping_info_money(trading_mode, ticker_id, company_name)

        # Verifica resultado final
        if success_exame and success_info_money:
            print("‚úÖ Todas as execu√ß√µes conclu√≠das com sucesso!")
            logging.info("Execu√ß√£o completa bem-sucedida")
        else:
            print("‚ùå Algumas execu√ß√µes falharam. Verifique os logs.")
            logging.warning("Execu√ß√£o completa com falhas")

    def run_buy_and_hold(self, trading_mode, ticker_id, company_name):
        """Executa scraping apenas uma vez (modo BUY & HOLD)"""
        print(f"üìä Modo BUY & HOLD selecionado")
        print("Executando uma √∫nica vez...")
        self.execute_scraping(trading_mode, ticker_id, company_name)
        print("\nüèÅ Execu√ß√£o finalizada. Aplica√ß√£o encerrada.")

    def run_day_trade(self, trading_mode, ticker_id, company_name):
        """Executa scraping todos os dias √†s 22h (modo DAY TRADE)"""
        print(f"üìà Modo DAY TRADE selecionado")
        print("A aplica√ß√£o ficar√° rodando infinitamente...")
        print("Execu√ß√£o programada para todos os dias √†s 22:00")

        # Executa imediatamente na primeira execu√ß√£o
        print("\nüîÑ Executando pela primeira vez...")
        self.execute_scraping(trading_mode, ticker_id, company_name)

        # Agenda execu√ß√£o di√°ria √†s 22:00
        schedule.every().day.at("22:00").do(self.execute_scraping)

        self.running = True

        # Loop infinito para manter aplica√ß√£o ativa
        print(f"\n‚è∞ Pr√≥xima execu√ß√£o agendada para hoje √†s 22:00")
        print("Pressione Ctrl+C para interromper a aplica√ß√£o")

        try:
            while self.running:
                schedule.run_pending()  # Verifica se h√° execu√ß√£o pendente
                time.sleep(60)          # Checa a cada 1 minuto
        except KeyboardInterrupt:
            # Permite encerrar manualmente com Ctrl+C
            print("\nüõë Aplica√ß√£o interrompida pelo usu√°rio")
            self.stop()

    def stop(self):
        """Interrompe execu√ß√£o cont√≠nua"""
        self.running = False
        logging.info("Aplica√ß√£o interrompida")

    def get_next_execution_time(self):
        """Retorna hor√°rio da pr√≥xima execu√ß√£o √†s 22h"""
        now = datetime.now()
        today_22 = now.replace(hour=22, minute=0, second=0, microsecond=0)

        # Se j√° passou das 22h, agenda para o dia seguinte
        if now < today_22:
            return today_22
        else:
            return today_22 + timedelta(days=1)

def main():
    # Configura√ß√£o de argumentos de linha de comando
    parser = argparse.ArgumentParser(description='App de Web Scraping')
    parser.add_argument(
        'mode',
        choices=['BUY_&_HOLD', 'DAY_TRADE'],
        help='Modo de opera√ß√£o: BUY_&_HOLD (execu√ß√£o √∫nica) ou DAY_TRADE (execu√ß√£o di√°ria)'
    )

    args = parser.parse_args()

    # Inicializa conex√£o com banco de dados
    print("üîß Initializing database connection...")
    if not initialize_database():
        print("‚ùå Failed to initialize database. Please check your MySQL connection.")
        logging.error("Database initialization failed")
        return
    print("‚úÖ Database initialized successfully")

    # Converte string recebida para enum
    mode = TradingMode(args.mode)

    # Recupera ID e nome da empresa pelo ticker
    ticker_id, company_name = yahoo_finance.get_ativo(TICKER, get_news_service())

    # Cria inst√¢ncia da aplica√ß√£o de scraping
    app = WebScrapingApp(mode)

    # Cabe√ßalho visual
    print("=" * 60)
    print("WEB SCRAPING")
    print("=" * 60)

    # Executa conforme modo escolhido
    if mode == TradingMode.BUY_AND_HOLD:
        app.run_buy_and_hold(TradingMode.BUY_AND_HOLD, ticker_id, company_name)
    elif mode == TradingMode.DAY_TRADE:
        app.run_day_trade(TradingMode.DAY_TRADE, ticker_id, company_name)

# Ponto de entrada da aplica√ß√£o
if __name__ == "__main__":
    main()
